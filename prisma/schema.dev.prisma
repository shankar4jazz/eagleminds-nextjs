// Development schema with SQLite
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  pages     Page[]
  leads     Lead[]
  tickets   Ticket[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  metaTitle   String?
  metaDesc    String?
  status      Status   @default(DRAFT)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User     @relation(fields: [authorId], references: [id])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  features    String   // JSON as string for SQLite
  pricing     String   // JSON as string for SQLite
  image       String?
  status      Status   @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lead {
  id          String     @id @default(cuid())
  name        String
  email       String
  phone       String?
  company     String?
  service     String
  message     String
  status      LeadStatus @default(NEW)
  source      String?
  assignedTo  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  assignee    User?      @relation(fields: [assignedTo], references: [id])
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  priority    Priority     @default(MEDIUM)
  status      TicketStatus @default(OPEN)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user        User         @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  CONTENT_MANAGER
  SUPPORT_STAFF
  MARKETING_MANAGER
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}